'''–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_miles(km), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª—è—Ö. –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –º–∏–ª–∏ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã * 0.6214.'''
# def convert_to_miles(km):
#     mil = km * 0.6214
#     return mil
# num = int(input())

# print(convert_to_miles(num))
'''–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 
–¥–Ω–µ–π –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 12.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–º.'''
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# 1, 3, 5, 7, 8, 10, 12 –º–µ—Å—è—Ü—ã - 31 –¥–µ–Ω—å
# 4, 6, 9, 11 - 30
# 2 - 28
# def get_days(month):
#     if num == 2:
#         return 28
#     elif num == 4 or num == 6 or num == 9 or num == 11:
#         return 30
#     else:
#         return 31
        
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# 
# print(get_days(num)) —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ—á–µ–Ω—å! –Ω–∏–∂–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!
# def get_days(month):
# ‚Üì‚Üì‚Üì‚Üì –≤–æ—Ç —Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
#     m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
#     return m[month - 1]
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_days(num))
'''–î–µ–ª–∏—Ç–µ–ª–∏ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 
–¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.'''
#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):
#     return [i for i in range(1, num + 1) if num % i == 0]
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#print(get_factors(n))
# "–¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω(i) –∏–∑ —Ü–∏–∫–ª–∞ —Ñ–æ—Ä –Ω(i) –≤ —Ä—ç–Ω–¥–∂(—Å –æ–¥–Ω–æ–≥–æ, –ø–æ —á–∏—Å–ª–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ 
# –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–≤–µ–Ω –Ω—É–ª—é"
# –¢.–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å 1-–≥–æ –ø–æ –≤–≤–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ 
# "–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –≤–≤–æ–¥–∏–º–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–≤–µ–Ω –Ω—É–ª—é" (–µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–∫. –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ 
# –æ—Å—Ç–∞—Ç–∫–∞ –Ω–µ—Ç)
'''–î–µ–ª–∏—Ç–µ–ª–∏ 2
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π 
–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_factors(num) –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.'''
#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):  —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—ç—Ç–æ–º—É
#     l = [i for i in range(1, num + 1) if num % i == 0]   –ª—É—á—à–µ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ —Ü–∏–∫–ª –∏ —Å—á–µ—Ç—á–∏–∫
#     return len(l)       
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input()) –Ω–∏–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ü–∏–∫–ª–æ–º –∏ —Å—á–µ—Ç—á–∏–∫–æ–º:
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_of_factors(num):
#     b=0
#     for i in range(1,num+1):
#         if num%i==0:
#             b+=1
#     return b

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_of_factors(n))

#—ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏, —Ç—É—Ç –æ–±—ä—è–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–π
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):
#     return [i for i in range(1, num +1) if num % i == 0]

# def number_of_factors(num):
#     return len(get_factors(num))   —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å—é–¥–∞

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_of_factors(n))
'''–ù–∞–π—Ç–∏ –≤—Å–µ—Ö
–ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ find('a') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ a –≤ —Å—Ç—Ä–æ–∫–µ. –ü—Ä–æ–±–ª–µ–º–∞ 
–∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É target –∏ —Å–∏–º–≤–æ–ª symbol 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.'''
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     ls = []
#     for i in range(len(s)):
#         if s[i] == char:
#             ls.append(i)
#     return ls

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# s = input()
# char = input()

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(find_all(s, char))
# def find_all(target, symbol):
#     return [x for x in range(len(target)) if target[x] == symbol]
'''Merge lists 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é 
—Å–ø–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ø–∏—Å–∫–∏ list1 –∏ list2 –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort(), –∞ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ–≥–æ üòé.'''
#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def merge(list1, list2):
#     list3 = list1 + list2
#     list3.sort()
#     return list3

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(merge(numbers1, numbers2))

'''Merge lists 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ 
—Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å 
–ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç 
–µ–≥–æ.
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, 
—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''
# def quick_merge(list1, list2):
#     result = []

#     p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
#     p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2

#     while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1

#     if p1 < len(list1):   # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
#         result += list1[p1:]
#     if p2 < len(list2):
#         result += list2[p2:]
    
#     return result

# n = int(input())
# numbers1 = [int(c) for c in input().split()]
# for _ in range(1, n):
#     numbers1 = quick_merge(numbers1, [int(c) for c in input().split()])
# print(*numbers1) 


# def quick_merge(list1, list2):  # –æ–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#     list_result = []
#     p1 = 0  # —ç—Ç–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ø–∏—Å–∫–∞ list1     
#     p2 = 0  # —ç—Ç–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ø–∏—Å–∫–∞ list2
#     while p1 < len(list1) and p2 < len(list2):  #–ø–æ–∫–∞ —Ü–∏—Ñ—Ä–∞1 –∏–Ω–¥–µ–∫—Å–∞ < –¥–ª–∏–Ω—ã (—Ü–∏—Ñ—Ä—ã) —Å–ø–∏—Å–∫–∞1 –∏ —Ü–∏—Ñ—Ä–∞2 –∏–Ω–¥–µ–∫—Å–∞ < –¥–ª–∏–Ω—ã (—Ü–∏—Ñ—Ä—ã) —Å–ø–∏—Å–∫–∞2
#         if list1[p1] <= list2[p2]:       #–µ—Å–ª–∏ –Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞1 <=(–º–µ–Ω—å—à–µ) –Ω—É–ª–µ–≤–æ–≥–æ —ç–µ–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞2
#             list_result.append(list1[p1]) # –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞1 –≤ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª–∏ –≤—ã—à–µ
#             p1 += 1 #–Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ñ—Ä–∞ (–Ω–æ–º–µ—Ä) –∏–Ω–¥–µ–∫—Å–∞ –±—É–¥–µ—Ç —Å–º–µ—â–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ, —Ç–æ –µ—Å—Ç—å –∏–¥—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É1
#         else: # –∏–Ω–∞—á–µ 
#             list_result.append(list2[p2]) #–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞1 >=(–±–æ–ª—å—à–µ) —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞2 —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞2
#             p2 += 1 #–Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ñ—Ä–∞ (–Ω–æ–º–µ—Ä) –∏–Ω–¥–µ–∫—Å–∞ –±—É–¥–µ—Ç —Å–º–µ—â–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ, —Ç–æ –µ—Å—Ç—å –∏–¥—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É2
#     if p1 < len(list1):   # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ (–∑–¥–µ—Å—å –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç
#         list_result += list1[p1:] # –¥–ª–∏–Ω–Ω–µ–µ —á–µ–º –¥—Ä—É–≥–æ–π (–ø–æ–º–Ω–∏–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥—è—Ç—Å—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, —ç—Ç–æ –≤–∞–∂–Ω–æ!) –æ—Å—Ç–∞—Ç–∫–∏
#     if p2 < len(list2):      # —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à list_result –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å—Ä–µ–∑–æ–≤
#         list_result += list2[p2:]
#     return list_result #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫

# #—Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
# n = int(input()) #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Ç–æ–º –≤–≤–æ–¥–∏—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# n1 = [int(c) for c in input().split()] # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º
# for _ in range(1, n): #—Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –¥–æ n —Ä–∞–∑ –∏ 
#     n1 = quick_merge(n1, [int(c) for c in input().split()]) # –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é quick_merge —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª–∏ 
#     #–∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏—Ç —é–∑–µ—Ä (—Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ –∂–µ –∫–∞–∫ –¥–µ–ª–∞–ª–∏ –≤—ã—à–µ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ 
#     # —Å–ø–∏—Å–∫–æ–≤)
# print(*n1)