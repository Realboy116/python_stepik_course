'''Таблица умножения
На вход программе подаются два натуральных числа n и m — количество строк и столбцов в матрице. Создайте матрицу mult 
размером n×m и заполните её таблицей умножения по формуле mult[i][j] = i * j.
Формат входных данных
На вход программе на разных строках подаются два числа n и m — количество строк и столбцов в матрице.
Формат выходных данных
Программа должна вывести таблицу умножения отводя на вывод каждого числа ровно 3 символа (для этого используйте 
строковый метод ljust()).'''

# n, m = int(input()), int(input())
# mult = []

# for i in range(n):
#     mult.append([0] * m)          здесь можно заполнить любыми значениями не обязательно нулями (0)
    
# for i in range(n):
#     for j in range(m):
#         mult[i][j] = i * j
#         print(mult[i][j], end=' ')
#     print()

'''Максимум в таблице
На вход программе подаются два натуральных числа n и m — количество строк и столбцов в матрице, затем n строк по 
m целых чисел в каждой, отделенных символом пробела.
Напишите программу, которая находит индексы (строку и столбец) первого вхождения максимального элемента.
Формат входных данных
На вход программе на разных строках подаются два числа n и m — количество строк и столбцов в матрице, затем сами 
элементы матрицы построчно через пробел.
Формат выходных данных
Программа должна вывести два числа: номер строки и номер столбца, в которых стоит наибольший элемент таблицы. Если таких
элементов несколько, то выводится тот, у которого меньше номер строки, а если номера строк равны то тот, у которого 
меньше номер столбца.
Примечание. Считайте, что нумерация строк и столбцов начинается с нуля.'''

# n = int(input())
# m = int(input())
# matrix = []

# for i in range(n):
#     matrix.append(input().split())
#     maximum = matrix[0][0]
# a, b = 0, 0

        
# for i in range(n):
#     for j in range(m):
#         if int(matrix[i][j]) > int(maximum):
#             maximum = matrix[i][j]
#             a = i
#             b = j
# print(a, b)

# n, m = int(input()), int(input())  решение от преподов
# matrix = [[int(i) for i in input().split()] for _ in range(n)]   разобраться как работает генератор матриц
# row, col = 0, 0
    
# for i in range(n):
#     for j in range(m):
#         if matrix[i][j] > matrix[row][col]:
#             row,col = i, j
            
# print(row, col)

'''Обмен столбцов
Напишите программу, которая меняет местами столбцы в матрице.
Формат входных данных
На вход программе на разных строках подаются два натуральных числа n и m — количество строк и столбцов в матрице, 
затем элементы матрицы построчно через пробел, затем числа i и j — номера столбцов, подлежащих обмену.
Формат выходных данных
Программа должна вывести указанную таблицу с замененными столбцами.'''

# n, m = int(input()), int(input())
# a = []

# for i in range(n):
#     a.append(input().split())

# i, j = map(int, input().split())

# for k in range(n):
#     a[k][i], a[k][j] = a[k][j], a[k][i]


# for r in range(len(a)):
#     for c in range(m):
#         print(a[r][c], end=' ')
#     print()

'''Симметричная матрица
Напишите программу, которая проверяет симметричность квадратной матрицы относительно главной диагонали.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести YES, если матрица симметрична относительно главной диагонали, и слово NO в противном случае.'''

# n = int(input())      
# mtx = [[int(num) for num in input().split()] for _ in range(n)]


# count = 0
# for i in range(n):
#     for j in range(n):
#         if mtx[i][j] == mtx[j][i]:
#             count += 1
# if count == n * n:
#     print('Yes')
# else:
#     print('No')

'''Обмен диагоналей
Дана квадратная матрица чисел. Напишите программу, которая меняет местами элементы, стоящие на главной и побочной 
диагонали, при этом каждый элемент должен остаться в том же столбце (то есть в каждом столбце нужно поменять местами 
элемент на главной диагонали и на побочной диагонали).
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел. Формат выходных данных
Программа должна вывести матрицу с элементами главной и побочной диагонали, поменявшимися своими местами.'''

# n = int(input())
# mtx = [[int(num) for num in input().split()] for _ in range(n)]

# for i in range(n):
#     mtx[i][i], mtx[n-1-i][i] = mtx[n-1-i][i], mtx[i][i]
           
# for i in range(n):                  вывод про который я думал что он стандартный
#     for j in range(n):
#         print(mtx[i][j], end=' ')
#     print()

# for row in mtx:                вывод квадратной матрицы с одним циклом
#     print(*row)

'''Зеркальное отображение
Дана квадратная матрица чисел. Напишите программу, которая зеркально отображает её элементы относительно 
горизонтальной оси симметрии.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести матрицу в которой зеркально отображены элементы относительно горизонтальной оси симметрии.'''

# n = int(input())
# mtx = [[int(num) for num in input().split()] for _ in range(n)]

# for i in range(n//2):
#     mtx[i], mtx[n-i-1] = mtx[n-i-1], mtx[i]

# for row in mtx:
#     print(*row)

'''Поворот матрицы
Напишите программу, которая поворачивает квадратную матрицу чисел на 90∘ по часовой стрелке.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести результат на экран, числа должны быть разделены одним пробелом.'''

# n = int(input())
# mtx = [[int(num) for num in input().split()] for _ in range(n)]

# for i in range(n):
#     for j in range(n):
#         print(mtx[n-j-1][i], end=' ')
#     print()

'''Ходы коня
На шахматной доске 8×8 стоит конь. Напишите программу, которая отмечает положение коня на доске и все клетки, 
которые бьет конь. Клетку, где стоит конь, отметьте английской буквой N, клетки, которые бьет конь, отметьте 
символами *, остальные клетки заполните точками.
Формат входных данных
На вход программе подаются координаты коня на шахматной доске в шахматной нотации (то есть в виде e4, где сначала 
записывается номер столбца (буква от a до h, слева направо), затем номеру строки (цифра от 1 до 8, снизу вверх)).
Формат выходных данных
Программа должна вывести на экран изображение доски, разделяя элементы пробелами.'''

# matrix = []
# for i in range(12):
#     matrix.append(['.'] * 12)

# xy = input()
# y = '87654321'.index(xy[1])
# x = 'abcdefgh'.index(xy[0])

# for i in range(8):
#     for j in range(8):
#         matrix[y][x] = matrix[y][x].replace('.','N')

# for i in range(8):
#     for j in range(8):
#         if 0 <= i <= 8 and 0 <= j <= 8:
#             if (i - y) ** 2 + (j - x) ** 2 == 5:
#                 matrix[i][j] = '*'
#         print(matrix[i][j], end=' ')
#     print()

'''Магический квадрат 🌶️
Магическим квадратом порядка n называется квадратная таблица размера n×n, составленная из всех чисел 1,2,3,…,n**2 так, 
что суммы по каждому столбцу, каждой строке и каждой из двух диагоналей равны между собой. Напишите программу, 
которая проверяет, является ли заданная квадратная матрица магическим квадратом.
Формат входных данных
На вход программе подаётся натуральное число 
n — количество строк и столбцов в матрице, затем элементы матрицы: n строк, по n чисел в каждой, разделённые пробелами.
Формат выходных данных
Программа должна вывести слово YES, если матрица является магическим квадратом, и слово NO в противном случае.'''

# n = int(input())   пока не решил эту задачу
# mat = [[int(num) for input().split()] for _ in range(n)]