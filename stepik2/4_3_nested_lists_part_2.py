'''Создание вложенных списков
Для создания вложенного списка можно использовать литеральную форму записи – перечисление элементов через запятую в 
квадратных скобках: my_list = [[0], [1, 2], [3, 4, 5]]
Иногда нужно создать вложенный список, заполненный по определенному правилу – шаблону. Например, список длиной n, 
содержащий списки длиной m, каждый из которых заполнен нулями.
Рассмотрим несколько способов решения задачи.
Способ 1. Создадим пустой список, потом n раз добавим в него новый элемент – список длины m, составленный из нулей:'''
    
# n, m = int(input()), int(input())
# my_list = []
# for _ in range(n):
#     my_list.append([0] * m)
# print(my_list)
#здесь если n=3 а m=5 то принт такой: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

'''Способ 2. Сначала создадим список из n элементов (для начала просто из n нулей). Затем сделаем каждый элемент 
списка ссылкой на другой список из m элементов, заполненный нулями:'''

# n, m = int(input()), int(input())
# my_list = [0] * n  #будет создан список из n нулей (не вложенный а обычный)
# for i in range(n): #здесь i на каждой итерации принимает значение из списка это [0, 0, 0]
#     my_list[i] = [0] * m  #а здесь i (а это элемент [0, 0, 0]) изменяется на [0, 0, 0, 0, 0] 
# print(my_list)            # и не забываем про количесвто итераций
#здесь тоже как и выше если n=3 а m=5 то принт такой: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

'''Способ 3. Можно использовать генератор списка: создадим список из n элементов, каждый из которых будет списком, 
состоящих из m нулей:'''

# n, m = int(input()), int(input())
# my_list = [[0] * m for _ in range(n)]
# print(my_list)
#здесь тоже как и выше если n=3 а m=5 то принт такой: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
'''ЗАПОМНИ: В Python списки – ссылочный тип данных. Конструкция [0] * m возвращает ccылку на список из m нулей. 
Повторение этого элемента создает список из n ссылок на один и тот же список.
!!!Вложенный список нельзя создать при помощи операции повторения (умножения списка на число). Для корректного создания 
вложенного списка мы используем способы 1- 3, отдавая предпочтение способу 3.'''

'''Считывание вложенных списков
Если элементы списка вводятся через клавиатуру (каждая строка на отдельной строке, всего n строк, числа в строке 
разделяются пробелами), для ввода списка можно использовать следующий код:'''
# n = 4                                          # количество строк (элементов)
# my_list = []
# for _ in range(n):
#     elem = [int(i) for i in input().split()]   # создаем список из элементов строки
#     my_list.append(elem)
'''В этом примере мы используем списочный метод append(), передавая ему в качестве аргумента другой список. Так у нас 
получается список списков. В результате, если на вход программе подаются строки
2 4
6 7 8 9
1 3
5 6 5 4 3 1
то в переменной my_list будет храниться список: [[2, 4], [6, 7, 8, 9], [1, 3], [5, 6, 5, 4, 3, 1]]
Не забывайте, что метод split() возвращает список строк, а не чисел. Поэтому мы предварительно сконвертировали строку в 
число, с помощью вызова функции int().
Также, следует помнить отличие работы списочных методов append() и extend(). Метод extend() создает одномерный (!) 
список, а не вложенный. Если использовать extend() то в переменной my_list будет храниться список:
[2, 4, 6, 7, 8, 9, 1, 3, 5, 6, 5, 4, 3, 1]'''

'''Перебор и вывод элементов вложенного списка
Как мы уже знаем для доступа к элементу списка указывают индекс этого элемента в квадратных скобках. В случае двумерных 
вложенных списков надо указать два индекса (каждый в отдельных квадратных скобках), в случае трехмерного списка — три 
индекса и т. д.
Рассмотрим программный код: my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(my_list[0][0])
print(my_list[1][2])
print(my_list[2][1])
Результатом работы такого кода будет:
1
6
8
Когда нужно перебрать все элементы вложенного списка (например, чтобы вывести их на экран), обычно используются вложенные 
циклы.
Рассмотрим программный код:
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in range(len(my_list)): здесь i это эелемент списка (каждый эедемент это список) цикл перебирает список элементов
    for j in range(len(my_list[i])): здесь j это каждый эл влож списков i цикл перебирает элементы вложенных списков
        print(my_list[i][j], end=' ')   # используем необязательный параметр end
    print()                             # перенос на новую строку
Результатом работы такого кода будет:
1 2 3 
4 5 6 
7 8 9 
В предыдущем примере мы перебирали индексы элементов, а можно сразу перебирать сами элементы вложенного списка:
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for row in my_list:
    for elem in row:
        print(elem, end=' ')
    print()
Результатом работы такого кода будет:
1 2 3 
4 5 6 
7 8 9
Перебор элементов вложенного списка по индексам дает нам больше гибкости для вывода данных. Например, поменяв порядок 
переменных i и j мы получаем иной тип вывода:
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in range(len(my_list)):
    for j in range(len(my_list[i])):
        print(my_list[j][i], end=' ')    # выводим my_list[j][i] вместо my_list[i][j]
    print()
 Результатом работы такого кода будет:
1 4 7 
2 5 8 
3 6 9 '''

'''Обработка вложенных списков
Для обработки элементов вложенного списка, так же как и для вывода его элементов на экран как правило используются 
вложенные циклы.
Используем вложенный цикл для подсчета суммы всех чисел в списке:
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
total = 0
for i in range(len(my_list)):
    for j in range(len(my_list[i])):
        total += my_list[i][j]
print(total)
Или то же самое с циклом не по индексу, а по значениям:
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
total = 0
for row in my_list:
    for elem in row:
        total += elem
print(total)
Таким образом можно обработать элементы вложенного списка практически в любом языке программирования. В Python, однако 
можно упростить код, если использовать встроенную функцию sum(), которая принимает список чисел и возвращает его сумму. 
Подсчет суммы с помощью функции sum() выглядит так:
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
total = 0
for row in my_list:      # в один цикл
    total += sum(row)
print(total)
Названия переменных row (строка) и elem (элемент) удобно использовать при переборе вложенного списка по значениям. 
Названия переменных i и j используются при переборе вложенного списка по индексам.'''

'''Что покажет приведенный ниже фрагмент кода?
my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]
maximum = my_list[0][0]
minimum = my_list[0][0]
for row in my_list:
    maximum = max(row)
    minimum = min(row)
print(maximum + minimum) 
!!!Пока не кончатся вложенные списки, будет перебирать каждый вложенный список, определяя максимальный и минимальный 
элемент в этом конкретном списке. Определив же, перейдет к следующему вложенному списку, а значения будут заменены 
значениями из нового списка. '''

'''Что покажет приведенный ниже фрагмент кода?
my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]
maximum = my_list[0][0]
minimum = my_list[0][0]
for row in my_list:
    if max(row) > maximum:
        maximum = max(row)
    if min(row) < minimum:
        minimum = min(row)
print(maximum + minimum)
В этой задаче суммируется макс и мин со всего многоуровневого Списка'''

'''Список по образцу 1
На вход программе подается число n. Напишите программу, которая создает и выводит построчно список, состоящий из n 
списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].
Формат входных данных
На вход программе подается натуральное число n.'''

# n = int(input())    #решил сам но мне не нравится
# ls = [int(i) for i in range(1, n +1)]
# for _ in range(n):
#     print(ls)

# n = int(input())   #это вариант от преподов но сказали что с генератором списков будет быстрее
# result = []
# for _ in range(n):
#     result.append(list(range(1, n + 1)))
# print(*result, sep='\n')

#третий способ
# n = int(input())
# ls = [[j for j in range(1, n +1)] for i in range(1, n +1)]
# print(*ls, sep='\n')

'''Список по образцу 2
На вход программе подается число n. Напишите программу, которая создает и выводит построчно вложенный список, состоящий 
из n списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].'''

# n = int(input())    это ! блин работает:)
# ls = []
# for i in range(1, n +1):
#     ls.append(i)
#     print(ls)
    
'''Треугольник Паскаля 1 🌶️
Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. В этом треугольнике на 
вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.
0:      1
1:     1 1
2:    1 2 1
3:   1 3 3 1
4:  1 4 6 4 1
      .....
На вход программе подается число n. Напишите программу, которая возвращает указанную строку треугольника Паскаля в виде 
списка (нумерация строк начинается с нуля).
Формат входных данных
На вход программе подается число n (n≥0).
Формат выходных данных
Программа должна вывести указанную строку треугольника Паскаля в виде списка.
Примечание 1. Решение удобно оформить в виде функции pascal(), которая принимает номер строки и возвращает 
соответствующую строку треугольника Паскаля.'''

# n = int(input())
# ls1 = []
# for i in range(n+1):
#     row = [1] * (i + 1)
#     for j in range(i + 1):
#         if j != 0 and j != i:
#             row[j] = ls1[i-1][j-1] + ls1[i-1][j]
        
#     ls1.append(row)
# print(ls1[i])

# for r in ls1:
#     print(r)

'''Треугольник Паскаля 2
На вход программе подается натуральное число n. Напишите программу, которая выводит первые n строк треугольника Паскаля.
Формат входных данных
На вход программе подается число n (n≥1).
Формат выходных данных
Программа должна вывести первые n строк треугольника Паскаля, каждую на отдельной строке в соответствии с образцом.'''

# n = int(input())
# ls = []
# for i in range(n):
#     row = [1] * (i+1)
#     for j in range(i+1):
#         if j != 0 and j != i:
#             row[j] = ls[i-1][j-1] + ls[i-1][j]
#     ls.append(row)
# for r in ls:
#     print(*r)

'''Упаковка дубликатов 🌶️
На вход программе подается строка текста, содержащая символы. Напишите программу, которая упаковывает последовательности 
одинаковых символов заданной строки в подсписки.
Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.
Формат выходных данных
Программа должна вывести указанный вложенный список.'''

# char_list = []
# a = []
# for char in input().split():
#     if a == []:
#         a.extend(char)
#     else:
#         if a[-1] == char:
#             a.extend(char)
#         else:
#             char_list.append(a)
#             a = []
#             a.extend(char)
# if a:
#     char_list.append(a)
    
# print(char_list)

'''Разбиение на чанки 🌶️
На вход программе подаются две строки, на одной символы, на другой число n. Из первой строки формируется список.
Реализуйте функцию chunked(), которая принимает на вход список и число, задающее размер чанка (куска), а возвращает 
список из чанков указанной длины.
Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число n на отдельной строке.
Формат выходных данных
Программа должна вывести указанный вложенный список.
Примечание. Не забудьте вызвать функцию chunked(), чтобы вывести результат 😀.'''

# def chunked(s, n):
#     ls = []
#     tmp_ls = []
#     for i in s:
#         tmp_ls.append(i)
#         if len(tmp_ls) == n:
#             ls.append(tmp_ls)
#             tmp_ls = []
#     if len(s) % n != 0:
#         ls.append(tmp_ls)
#     return ls
    
# s = input().split()
# n = int(input())

# chunked(s, n)
# print(chunked(s, n))

'''Подсписки списка 🌶️🌶️
Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько, и даже ни одного. Например, [1], 
[2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка [1, 2, 3, 4], но список [2, 4] не 
подсписок списка [1, 2, 3, 4], так как элементы 2 и 4 во втором списке не смежные. Пустой список — подсписок любого 
списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4] подсписок списка [1, 2, 3, 4].
На вход программе подается строка текста, содержащая символы. Из данной строки формируется список. Напишите программу, 
которая выводит список, содержащий все возможные подсписки списка, включая пустой список.
Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.
Формат выходных данных
Программа должна вывести указанный список, содержащий все возможные подсписки, включая пустой список в соответствии с 
примерами.
Примечание. Порядок списков одинаковой длины должен соответствовать порядку их вхождения в основной список.'''

# s = input().split() эту задачу я не доделал!
# ls = []
# tmp_ls = []
# for i in s:
#     ls.append(tmp_ls)
    
#     print(i)