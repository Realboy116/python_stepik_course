'''Напишите функцию matrix(), которая создает, заполняет и возвращает матрицу заданного размера. При этом 
(в зависимости от переданных аргументов) она должна вести себя так: 
matrix() — возвращает матрицу 1× 1, в которой единственное число равно нулю;
matrix(n) — возвращает матрицу n× n, заполненную нулями;
matrix(n, m) — возвращает матрицу из n строк и m столбцов, заполненную нулями;
matrix(n, m, value) — возвращает матрицу из n строк и m столбцов, в которой каждый элемент равен числу value.
При создании функции пользуйтесь аргументами по умолчанию.'''

# def matrix(n=1, m=None, v=0):
#     if m is None:
#         m = n
#     return [[v] * m for _ in range(n)]
# print(matrix(4))

'''Напишите функцию count_args(), которая принимает произвольное количество аргументов и возвращает количество 
переданных в нее аргументов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.'''

# def count_args(*args):
#     return len(args)

# print(count_args([], (''), 'a', 12, False))

'''Напишите функцию sq_sum(), которая принимает произвольное количество числовых аргументов и возвращает сумму их 
квадратов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.'''

# def sq_sum(*args):                           Вариант 1
#     return sum(num**2 for num in args)
# print(sq_sum(2, 2))

# def sq_sum(*args):                           Вариант 2
#     s = 0
#     for i in args:
#         s += i**2
#     return s

'''Напишите функцию greet(), которая принимает произвольное количество аргументов строк имен (как минимум одно) и 
возвращает приветствие в соответствии с образцом.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.'''

# def greet(name, *names):                                     Вариант 1 со списками и ф строкой
#     return f"Hello, {' and '.join([name] + [*names])}!"
# print(greet('Tim', 'Tom'))

# def greet(name, *args):                                      Вариант 2 через цикл
#     result = 'Hello, ' + name
#     for a in args:
#         result += ' and ' + a
#     return result + '!'

'''Напишите функцию print_products(), которая принимает произвольное количество аргументов и выводит список продуктов 
(любая непустая строка) по образцу: <номер продукта>) <название продукта> (нумерация продуктов начинается с единицы). 
Если среди переданных аргументов нет ни одного продукта, необходимо вывести текст Нет продуктов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Числа, списки, кортежи, словари, множества и другие нестроковые объекты продуктами не являются и их нужно 
игнорировать.'''

# def print_products(*args):
#     args = [i for i in args if type(i) is str and i]
#     if args:
#         for n, v in enumerate(args):
#             print(f"{n+1}) {v}")
#     else:
#         print('Нет продуктов')
            
# print_products('Бананы', [1, 2], ('Stepik',), 'Яблоки', '', 'Макароны', 5, True)

'''Напишите функцию info_kwargs(), которая принимает произвольное количество именованных аргументов и печатает 
именованные аргументы в соответствии с образцом: <имя аргумента>: <значение аргумента>, при этом имена аргументов 
следуют в алфавитном порядке (по возрастанию).
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество именованных 
аргументов.'''

# def info_kwargs(**kwargs):
#     for key, value in sorted(kwargs.items()):
#         print(f'{key}: {value}')
# info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher')          